#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour d√©montrer la cr√©ation automatique de si√®ges
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

import old.modele as modele

def test_room_creation():
    """Test de cr√©ation d'une salle avec g√©n√©ration automatique des si√®ges"""
    
    print("=== Test de cr√©ation d'une salle ===\n")
    
    # Test 1: Petite salle (15 si√®ges)
    print("1. Cr√©ation d'une petite salle (15 si√®ges)")
    success, message = modele.add_room("Salle Test 1", 15)
    print(f"R√©sultat: {message}")
    
    if success:
        # R√©cup√©rer l'ID de la salle cr√©√©e
        rooms = modele.get_all_rooms()
        if rooms:
            test_room_id = None
            for room in rooms:
                if room['name'] == "Salle Test 1":
                    test_room_id = room['id']
                    break
            
            if test_room_id:
                print(f"\nDisposition de la salle cr√©√©e (ID: {test_room_id}):")
                modele.print_room_layout(test_room_id)
    
    print("\n" + "="*50 + "\n")
    
    # Test 2: Salle moyenne (25 si√®ges)
    print("2. Cr√©ation d'une salle moyenne (25 si√®ges)")
    success, message = modele.add_room("Salle Test 2", 25)
    print(f"R√©sultat: {message}")
    
    if success:
        rooms = modele.get_all_rooms()
        if rooms:
            test_room_id = None
            for room in rooms:
                if room['name'] == "Salle Test 2":
                    test_room_id = room['id']
                    break
            
            if test_room_id:
                print(f"\nDisposition de la salle cr√©√©e (ID: {test_room_id}):")
                modele.print_room_layout(test_room_id)

def explain_seat_generation():
    """Explique le processus de g√©n√©ration des si√®ges"""
    
    print("=== Explication du processus de g√©n√©ration des si√®ges ===\n")
    
    print("Quand un administrateur cr√©e une salle via l'interface admin:")
    print("1. L'utilisateur saisit le nom de la salle et sa capacit√©")
    print("2. Le serveur Flask appelle modele.add_room(name, capacity)")
    print("3. add_room() ins√®re la salle dans la table 'room'")
    print("4. add_room() appelle automatiquement create_seats_for_room()")
    print("5. create_seats_for_room() g√©n√®re tous les si√®ges:\n")
    
    capacities = [15, 25, 45]
    
    for capacity in capacities:
        seats_per_row = 10
        total_rows = (capacity + seats_per_row - 1) // seats_per_row
        
        print(f"   Exemple avec {capacity} si√®ges:")
        print(f"   - Rang√©es n√©cessaires: {total_rows}")
        
        seats_created = 0
        for row_num in range(1, total_rows + 1):
            seats_in_row = min(seats_per_row, capacity - seats_created)
            row_letter = chr(64 + row_num)
            print(f"   - Rang√©e {row_letter}: si√®ges {row_letter}1 √† {row_letter}{seats_in_row}")
            seats_created += seats_in_row
        
        print(f"   - Total: {seats_created} si√®ges")
        print()
    
    print("R√®gles de g√©n√©ration:")
    print("- Maximum 10 si√®ges par rang√©e")
    print("- Rang√©es nomm√©es A, B, C, D, ...")
    print("- Si√®ges num√©rot√©s 1, 2, 3, ... dans chaque rang√©e")
    print("- Les si√®ges A1 et A2 sont automatiquement marqu√©s PMR")
    print("- Structure: seat_row (VARCHAR) + seat_column (INT)")

def show_database_structure():
    """Montre la structure de la table seat"""
    
    print("=== Structure de la table seat ===\n")
    
    print("Table: seat")
    print("‚îú‚îÄ‚îÄ id (INT, AUTO_INCREMENT, PRIMARY KEY)")
    print("‚îú‚îÄ‚îÄ pmr (TINYINT, 0=normal, 1=PMR)")
    print("‚îú‚îÄ‚îÄ room_id (INT, FOREIGN KEY vers room.id)")
    print("‚îú‚îÄ‚îÄ seat_row (VARCHAR(45), A, B, C, ...)")
    print("‚îî‚îÄ‚îÄ seat_column (INT, 1, 2, 3, ...)")
    print()
    print("Contrainte unique: (seat_row, seat_column, room_id)")
    print("‚Üí Chaque combinaison lettre+num√©ro est unique par salle")
    print()
    print("Exemples de donn√©es:")
    print("| id | pmr | room_id | seat_row | seat_column |")
    print("|----|-----|---------|-------------|-------------|")
    print("| 1  | 1   | 1       | A           | 1           | ‚Üê PMR")
    print("| 2  | 1   | 1       | A           | 2           | ‚Üê PMR")
    print("| 3  | 0   | 1       | A           | 3           |")
    print("| 4  | 0   | 1       | A           | 4           |")
    print("| 5  | 0   | 1       | B           | 1           |")

if __name__ == "__main__":
    print("üé¨ Test de g√©n√©ration automatique des si√®ges\n")
    
    # V√©rifier la connexion
    if not modele.get_db_connection():
        print("‚ùå Impossible de se connecter √† la base de donn√©es")
        sys.exit(1)
    
    print("‚úÖ Connexion √† la base de donn√©es r√©ussie\n")
    
    # Expliquer le processus
    explain_seat_generation()
    print("\n" + "="*60 + "\n")
    
    # Montrer la structure
    show_database_structure()
    print("\n" + "="*60 + "\n")
    
    # Demander si on veut tester
    response = input("Voulez-vous tester la cr√©ation de salles ? (y/n): ")
    if response.lower() in ['y', 'yes', 'o', 'oui']:
        test_room_creation()
    
    print("\nüéØ R√©sum√©:")
    print("- Les si√®ges sont cr√©√©s automatiquement lors de l'ajout d'une salle")
    print("- La fonction create_seats_for_room() g√®re la logique de g√©n√©ration")
    print("- Les lettres et num√©ros sont assign√©s selon une grille standard")
    print("- Les si√®ges PMR sont automatiquement d√©finis (A1, A2)")
